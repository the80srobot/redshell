# This file is generated by quick.py. Do not edit.
# Run q quick rebuild to regenerate.

if [[ -z "${_REDSHELL_GEN_QUICK}" || -n "${_REDSHELL_RELOAD}" ]]; then
_REDSHELL_GEN_QUICK=1
function __q() {
  if [ "$#" -eq 0 ]; then
    __q_help
    return 0
  fi
  case "$1" in
  help|-h|--help|?)
    shift
    __q_help "$@"
    ;;
  browser)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "browser" "$@"
      ;;
    gdocs_id)
      shift
      gdocs_id "$@"
      ;;
    sheets_dl_link)
      shift
      sheets_dl_link "$@"
      ;;
    chrome_path)
      shift
      chrome_path "$@"
      ;;
    downloads_path)
      shift
      downloads_path "$@"
      ;;
    browser_dl|dl)
      shift
      browser_dl "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module browser has no function $1"
      fi
      __q_help browser
      return 1
      ;;
    esac
    ;;
  python)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "python" "$@"
      ;;
    venv)
      shift
      venv "$@"
      ;;
    ipynb)
      shift
      ipynb "$@"
      ;;
    detect_python)
      shift
      detect_python "$@"
      ;;
    latest_python)
      shift
      latest_python "$@"
      ;;
    python_func|func)
      shift
      python_func "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module python has no function $1"
      fi
      __q_help python
      return 1
      ;;
    esac
    ;;
  quick)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "quick" "$@"
      ;;
    quick_rebuild|rebuild)
      shift
      quick_rebuild "$@"
      ;;
    q)
      shift
      q "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module quick has no function $1"
      fi
      __q_help quick
      return 1
      ;;
    esac
    ;;
  git)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "git" "$@"
      ;;
    mkproject)
      shift
      mkproject "$@"
      ;;
    git-ssh-init)
      shift
      git-ssh-init "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module git has no function $1"
      fi
      __q_help git
      return 1
      ;;
    esac
    ;;
  bash)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "bash" "$@"
      ;;
    get_bash_functions)
      shift
      get_bash_functions "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module bash has no function $1"
      fi
      __q_help bash
      return 1
      ;;
    esac
    ;;
  net)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "net" "$@"
      ;;
    dataurl)
      shift
      dataurl "$@"
      ;;
    rtt)
      shift
      rtt "$@"
      ;;
    ip4)
      shift
      ip4 "$@"
      ;;
    ip4gw)
      shift
      ip4gw "$@"
      ;;
    serve)
      shift
      serve "$@"
      ;;
    dump_url)
      shift
      dump_url "$@"
      ;;
    wiki)
      shift
      wiki "$@"
      ;;
    wifi_device)
      shift
      wifi_device "$@"
      ;;
    wifi_name)
      shift
      wifi_name "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module net has no function $1"
      fi
      __q_help net
      return 1
      ;;
    esac
    ;;
  install)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "install" "$@"
      ;;
    reinstall_file)
      shift
      reinstall_file "$@"
      ;;
    install_file|file)
      shift
      install_file "$@"
      ;;
    uninstall_file)
      shift
      uninstall_file "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module install has no function $1"
      fi
      __q_help install
      return 1
      ;;
    esac
    ;;
  ascii_art)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "ascii_art" "$@"
      ;;
    print_speech_bubble)
      shift
      print_speech_bubble "$@"
      ;;
    erase_lines)
      shift
      erase_lines "$@"
      ;;
    cursor_position)
      shift
      cursor_position "$@"
      ;;
    cursor_row)
      shift
      cursor_row "$@"
      ;;
    print_bmo)
      shift
      print_bmo "$@"
      ;;
    print_pedro)
      shift
      print_pedro "$@"
      ;;
    scroll_output_pedro)
      shift
      scroll_output_pedro "$@"
      ;;
    select_visual)
      shift
      select_visual "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module ascii_art has no function $1"
      fi
      __q_help ascii_art
      return 1
      ;;
    esac
    ;;
  init)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "init" "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module init has no function $1"
      fi
      __q_help init
      return 1
      ;;
    esac
    ;;
  crypt)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "crypt" "$@"
      ;;
    encrypt_symmetric)
      shift
      encrypt_symmetric "$@"
      ;;
    decrypt_symmetric)
      shift
      decrypt_symmetric "$@"
      ;;
    gen_github_keypair)
      shift
      gen_github_keypair "$@"
      ;;
    package)
      shift
      package "$@"
      ;;
    payloadify)
      shift
      payloadify "$@"
      ;;
    downloadify)
      shift
      downloadify "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module crypt has no function $1"
      fi
      __q_help crypt
      return 1
      ;;
    esac
    ;;
  util)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "util" "$@"
      ;;
    sud)
      shift
      sud "$@"
      ;;
    h)
      shift
      h "$@"
      ;;
    reload)
      shift
      reload "$@"
      ;;
    markdown)
      shift
      markdown "$@"
      ;;
    human_size)
      shift
      human_size "$@"
      ;;
    install_heroku_cli)
      shift
      install_heroku_cli "$@"
      ;;
    bazel)
      shift
      bazel "$@"
      ;;
    jup)
      shift
      jup "$@"
      ;;
    wait_for_file)
      shift
      wait_for_file "$@"
      ;;
    forex)
      shift
      forex "$@"
      ;;
    trim)
      shift
      trim "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module util has no function $1"
      fi
      __q_help util
      return 1
      ;;
    esac
    ;;
  rust)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "rust" "$@"
      ;;
    rustup)
      shift
      rustup "$@"
      ;;
    rust_install_goodies|install_goodies)
      shift
      rust_install_goodies "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module rust has no function $1"
      fi
      __q_help rust
      return 1
      ;;
    esac
    ;;
  strings)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "strings" "$@"
      ;;
    strip_control)
      shift
      strip_control "$@"
      ;;
    repeat)
      shift
      repeat "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module strings has no function $1"
      fi
      __q_help strings
      return 1
      ;;
    esac
    ;;
  mac)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "mac" "$@"
      ;;
    mac_setup|setup)
      shift
      mac_setup "$@"
      ;;
    brew)
      shift
      brew "$@"
      ;;
    mac_get_user_shell|get_user_shell)
      shift
      mac_get_user_shell "$@"
      ;;
    mac_brew_bash_path|brew_bash_path)
      shift
      mac_brew_bash_path "$@"
      ;;
    mac_switch_to_bash|switch_to_bash)
      shift
      mac_switch_to_bash "$@"
      ;;
    icloud)
      shift
      icloud "$@"
      ;;
    icloud_evict)
      shift
      icloud_evict "$@"
      ;;
    brew_install_or_skip)
      shift
      brew_install_or_skip "$@"
      ;;
    mac_install_miniconda|install_miniconda)
      shift
      mac_install_miniconda "$@"
      ;;
    mac_install_devtools|install_devtools)
      shift
      mac_install_devtools "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module mac has no function $1"
      fi
      __q_help mac
      return 1
      ;;
    esac
    ;;
  media)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "media" "$@"
      ;;
    yt-dl)
      shift
      yt-dl "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module media has no function $1"
      fi
      __q_help media
      return 1
      ;;
    esac
    ;;
  notes)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "notes" "$@"
      ;;
    napi_list_notes)
      shift
      napi_list_notes "$@"
      ;;
    nbck)
      shift
      nbck "$@"
      ;;
    napi_empty_notes)
      shift
      napi_empty_notes "$@"
      ;;
    napi_list_todos)
      shift
      napi_list_todos "$@"
      ;;
    ntodo_help)
      shift
      ntodo_help "$@"
      ;;
    ntodo)
      shift
      ntodo "$@"
      ;;
    napi_git)
      shift
      napi_git "$@"
      ;;
    napi_clone)
      shift
      napi_clone "$@"
      ;;
    nfsck)
      shift
      nfsck "$@"
      ;;
    nw)
      shift
      nw "$@"
      ;;
    nwin)
      shift
      nwin "$@"
      ;;
    napi_find)
      shift
      napi_find "$@"
      ;;
    napi_quick_title)
      shift
      napi_quick_title "$@"
      ;;
    nlog)
      shift
      nlog "$@"
      ;;
    nn)
      shift
      nn "$@"
      ;;
    nsync)
      shift
      nsync "$@"
      ;;
    napi_match_files)
      shift
      napi_match_files "$@"
      ;;
    nls)
      shift
      nls "$@"
      ;;
    nhist)
      shift
      nhist "$@"
      ;;
    nundo)
      shift
      nundo "$@"
      ;;
    napi_drop_note)
      shift
      napi_drop_note "$@"
      ;;
    ngc)
      shift
      ngc "$@"
      ;;
    napi_update_note)
      shift
      napi_update_note "$@"
      ;;
    napi_edit_note)
      shift
      napi_edit_note "$@"
      ;;
    napi_perl_preview)
      shift
      napi_perl_preview "$@"
      ;;
    nperl)
      shift
      nperl "$@"
      ;;
    n)
      shift
      n "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module notes has no function $1"
      fi
      __q_help notes
      return 1
      ;;
    esac
    ;;
  time)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "time" "$@"
      ;;
    file_mtime)
      shift
      file_mtime "$@"
      ;;
    file_age)
      shift
      file_age "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module time has no function $1"
      fi
      __q_help time
      return 1
      ;;
    esac
    ;;
  find)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "find" "$@"
      ;;
    f)
      shift
      f "$@"
      ;;
    fcc)
      shift
      fcc "$@"
      ;;
    fgo)
      shift
      fgo "$@"
      ;;
    fjava)
      shift
      fjava "$@"
      ;;
    faidl)
      shift
      faidl "$@"
      ;;
    fd)
      shift
      fd "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module find has no function $1"
      fi
      __q_help find
      return 1
      ;;
    esac
    ;;
  hg)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "hg" "$@"
      ;;
    is_dir_hg)
      shift
      is_dir_hg "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module hg has no function $1"
      fi
      __q_help hg
      return 1
      ;;
    esac
    ;;
  xterm_colors)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "xterm_colors" "$@"
      ;;
    channel_step)
      shift
      channel_step "$@"
      ;;
    greyscale_step)
      shift
      greyscale_step "$@"
      ;;
    rgb_to_xterm)
      shift
      rgb_to_xterm "$@"
      ;;
    hue_diff)
      shift
      hue_diff "$@"
      ;;
    brightness)
      shift
      brightness "$@"
      ;;
    contrast)
      shift
      contrast "$@"
      ;;
    xterm_to_rgb)
      shift
      xterm_to_rgb "$@"
      ;;
    xterm_to_fg)
      shift
      xterm_to_fg "$@"
      ;;
    xterm_to_bg)
      shift
      xterm_to_bg "$@"
      ;;
    tfmt)
      shift
      tfmt "$@"
      ;;
    color)
      shift
      color "$@"
      ;;
    shades)
      shift
      shades "$@"
      ;;
    colors)
      shift
      colors "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module xterm_colors has no function $1"
      fi
      __q_help xterm_colors
      return 1
      ;;
    esac
    ;;
  go)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "go" "$@"
      ;;
    go_pkg_do|pkg_do)
      shift
      go_pkg_do "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module go has no function $1"
      fi
      __q_help go
      return 1
      ;;
    esac
    ;;
  fedora)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "fedora" "$@"
      ;;
    fedora_setup|setup)
      shift
      fedora_setup "$@"
      ;;
    dnf_install_or_skip)
      shift
      dnf_install_or_skip "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module fedora has no function $1"
      fi
      __q_help fedora
      return 1
      ;;
    esac
    ;;
  multiple_choice)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "multiple_choice" "$@"
      ;;
    multiple_choice)
      shift
      multiple_choice "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module multiple_choice has no function $1"
      fi
      __q_help multiple_choice
      return 1
      ;;
    esac
    ;;
  monitor)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "monitor" "$@"
      ;;
    stream_load_stats)
      shift
      stream_load_stats "$@"
      ;;
    load_hist)
      shift
      load_hist "$@"
      ;;
    latest_load_stats)
      shift
      latest_load_stats "$@"
      ;;
    write_load_stats)
      shift
      write_load_stats "$@"
      ;;
    stream_top_stats)
      shift
      stream_top_stats "$@"
      ;;
    stream_net_stats)
      shift
      stream_net_stats "$@"
      ;;
    proc_stats)
      shift
      proc_stats "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module monitor has no function $1"
      fi
      __q_help monitor
      return 1
      ;;
    esac
    ;;
  keyring)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "keyring" "$@"
      ;;
    keys_git)
      shift
      keys_git "$@"
      ;;
    keys_path)
      shift
      keys_path "$@"
      ;;
    keys_var)
      shift
      keys_var "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module keyring has no function $1"
      fi
      __q_help keyring
      return 1
      ;;
    esac
    ;;
  pkg)
    shift
    case "$1" in
    help|-h|--help|?)
      shift
      __q_help "pkg" "$@"
      ;;
    pkg_install_or_skip|install_or_skip)
      shift
      pkg_install_or_skip "$@"
      ;;
    *)
      if [ -n "$1" ]; then
        echo "Module pkg has no function $1"
      fi
      __q_help pkg
      return 1
      ;;
    esac
    ;;
  *)
    echo "Unknown module $1"
    return 1
    ;;
  esac
}

function __q_help() {
  if [ "$#" -eq 0 ]; then
    echo "q - redshell function registry"
    echo "Usage: q [-h|--help] MODULE FUNCTION [ARG...]"
    echo "Run q --help MODULE for more information on a module."
    echo
    echo "Available modules:"
    echo '  browser         (no description)'
    echo '  python          This file provides functions to manage python environments, and quickly launch'
    echo '                  python code in various ways. It includes a Bash-Python FFI bridge, in'
    echo '                  python_func.'
    echo '  quick           (no description)'
    echo '  git             (no description)'
    echo '  bash            (no description)'
    echo '  net             (no description)'
    echo '  install         Install a file into another file, optionally with a keyword.'
    echo '  ascii_art       (no description)'
    echo '  crypt           (no description)'
    echo '  util            (no description)'
    echo '  rust            (no description)'
    echo '  strings         This file provides various terminal string helpers.'
    echo '  mac             (no description)'
    echo '  media           (no description)'
    echo '  notes           This file implements a command-line note management system based on git and'
    echo '                  markdown. It'"'"'s evolved over the years to be incredibly ergonomic for me, its'
    echo '                  only user and developer. The madness of doing all this in bash is not lost on'
    echo '                  me - I can only say that it started quite simple and grew features and use'
    echo '                  cases over time, and I know better than to rewrite something that works fine.'
    echo '  time            (no description)'
    echo '  find            (no description)'
    echo '  hg              (no description)'
    echo '  xterm_colors    This file contains functions for working with xterm color codes.'
    echo '  go              (no description)'
    echo '  fedora          (no description)'
    echo '  multiple_choice (no description)'
    echo '  monitor         This file provides functions to monitor system stats and write them to a log.'
    echo '  keyring         (no description)'
    echo '  pkg             (no description)'
    return 0
  fi
  if [ "$#" -eq 1 ]; then
    case "$1" in
    browser)
      echo "Usage: q browser FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q browser gdocs_id [ARG...]"
      tput sgr0
      tput bold
      echo "  q browser sheets_dl_link [ARG...]"
      tput sgr0
      tput bold
      echo "  q browser chrome_path [ARG...]"
      tput sgr0
      tput bold
      echo "  q browser downloads_path [ARG...]"
      tput sgr0
      tput bold
      echo "  q browser dl [ARG...]"
      tput sgr0
      echo '    Downloads a URL with the browser and returns the path to the downloaded file.'
      echo '    This is finnicky and relies on the browser downloading to the default'
      echo '    Downloads folder. If multiple new files are created around the same time, this'
      echo '    might behave in unpredictable ways. You'"'"'ve been warned.'
      ;;
    python)
      echo "Usage: q python FUNCTION [ARG...]"
      echo "This file provides functions to manage python environments, and quickly launch"
      echo "python code in various ways. It includes a Bash-Python FFI bridge, in"
      echo "python_func."
      echo
      echo "Available functions:"
      tput bold
      echo "  q python venv [ARG...]"
      tput sgr0
      tput bold
      echo "  q python ipynb [ARG...]"
      tput sgr0
      tput bold
      echo "  q python detect_python [ARG...]"
      tput sgr0
      tput bold
      echo "  q python latest_python [ARG...]"
      tput sgr0
      tput bold
      echo "  q python func [ARG...]"
      tput sgr0
      ;;
    quick)
      echo "Usage: q quick FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q quick rebuild [PATH]"
      tput sgr0
      tput bold
      echo "  q quick q [ARG...]"
      tput sgr0
      ;;
    git)
      echo "Usage: q git FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q git mkproject [ARG...]"
      tput sgr0
      tput bold
      echo "  q git git-ssh-init [ARG...]"
      tput sgr0
      ;;
    bash)
      echo "Usage: q bash FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q bash get_bash_functions [ARG...]"
      tput sgr0
      ;;
    net)
      echo "Usage: q net FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q net dataurl [ARG...]"
      tput sgr0
      echo '    Create a data URL from a file'
      tput bold
      echo "  q net rtt [ARG...]"
      tput sgr0
      echo '    Average round-trip time to the specified host.'
      tput bold
      echo "  q net ip4 [ARG...]"
      tput sgr0
      echo '    Print the non-localhost IPv4 addresses of this machine. One address per line.'
      tput bold
      echo "  q net ip4gw [ARG...]"
      tput sgr0
      tput bold
      echo "  q net serve [ARG...]"
      tput sgr0
      tput bold
      echo "  q net dump_url [ARG...]"
      tput sgr0
      tput bold
      echo "  q net wiki [ARG...]"
      tput sgr0
      tput bold
      echo "  q net wifi_device [ARG...]"
      tput sgr0
      tput bold
      echo "  q net wifi_name [ARG...]"
      tput sgr0
      ;;
    install)
      echo "Usage: q install FUNCTION [ARG...]"
      echo "Install a file into another file, optionally with a keyword."
      echo
      echo "Available functions:"
      tput bold
      echo "  q install reinstall_file [ARG...]"
      tput sgr0
      tput bold
      echo "  q install file [ARG...]"
      tput sgr0
      tput bold
      echo "  q install uninstall_file [ARG...]"
      tput sgr0
      ;;
    ascii_art)
      echo "Usage: q ascii_art FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q ascii_art print_speech_bubble [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art erase_lines [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art cursor_position [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art cursor_row [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art print_bmo [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art print_pedro [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art scroll_output_pedro [ARG...]"
      tput sgr0
      tput bold
      echo "  q ascii_art select_visual [ARG...]"
      tput sgr0
      ;;
    init)
      echo "Usage: q init FUNCTION [ARG...]"
      echo "Set the editor to vim by default, vscode if available."
      echo
      echo "Available functions:"
      ;;
    crypt)
      echo "Usage: q crypt FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q crypt encrypt_symmetric [ARG...]"
      tput sgr0
      tput bold
      echo "  q crypt decrypt_symmetric [ARG...]"
      tput sgr0
      tput bold
      echo "  q crypt gen_github_keypair [ARG...]"
      tput sgr0
      tput bold
      echo "  q crypt package [ARG...]"
      tput sgr0
      tput bold
      echo "  q crypt payloadify [ARG...]"
      tput sgr0
      tput bold
      echo "  q crypt downloadify [ARG...]"
      tput sgr0
      ;;
    util)
      echo "Usage: q util FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q util sud [ARG...]"
      tput sgr0
      tput bold
      echo "  q util h ALGO [INPUT]"
      tput sgr0
      echo '    Print a cryptographic hash of the input.'
      echo '    '
      echo '    If no INPUT is provided, read from stdin.'
      echo '    '
      echo '    h 256 foo -> b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c'
      echo '    h md5 foo -> d3b07384d113edec49eaa6238ad5ff00'
      tput bold
      echo "  q util reload [ARG...]"
      tput sgr0
      tput bold
      echo "  q util markdown [ARG...]"
      tput sgr0
      tput bold
      echo "  q util human_size [ARG...]"
      tput sgr0
      tput bold
      echo "  q util install_heroku_cli [ARG...]"
      tput sgr0
      tput bold
      echo "  q util bazel [ARG...]"
      tput sgr0
      tput bold
      echo "  q util jup [ARG...]"
      tput sgr0
      tput bold
      echo "  q util wait_for_file [ARG...]"
      tput sgr0
      tput bold
      echo "  q util forex [ARG...]"
      tput sgr0
      tput bold
      echo "  q util trim [ARG...]"
      tput sgr0
      ;;
    rust)
      echo "Usage: q rust FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q rust rustup [ARG...]"
      tput sgr0
      tput bold
      echo "  q rust install_goodies [ARG...]"
      tput sgr0
      ;;
    strings)
      echo "Usage: q strings FUNCTION [ARG...]"
      echo "This file provides various terminal string helpers."
      echo
      echo "Available functions:"
      tput bold
      echo "  q strings strip_control [ARG...]"
      tput sgr0
      echo '    Strips terminal escape sequences from the input.'
      tput bold
      echo "  q strings repeat [ARG...]"
      tput sgr0
      echo '    repeat CHAR COUNT: prints CHAR COUNT times.'
      ;;
    mac)
      echo "Usage: q mac FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q mac setup [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac brew [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac get_user_shell [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac brew_bash_path [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac switch_to_bash [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac icloud [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac icloud_evict [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac brew_install_or_skip [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac install_miniconda [ARG...]"
      tput sgr0
      tput bold
      echo "  q mac install_devtools [ARG...]"
      tput sgr0
      ;;
    media)
      echo "Usage: q media FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q media yt-dl [ARG...]"
      tput sgr0
      ;;
    notes)
      echo "Usage: q notes FUNCTION [ARG...]"
      echo "This file implements a command-line note management system based on git and"
      echo "markdown. It's evolved over the years to be incredibly ergonomic for me, its"
      echo "only user and developer. The madness of doing all this in bash is not lost on"
      echo "me - I can only say that it started quite simple and grew features and use"
      echo "cases over time, and I know better than to rewrite something that works fine."
      echo
      echo "Available functions:"
      tput bold
      echo "  q notes napi_list_notes [ARG...]"
      tput sgr0
      echo '    Outputs:'
      echo '    '
      echo '    1. relative path'
      echo '    2. mtime'
      echo '    3. age'
      echo '    4. line count'
      echo '    5. depth'
      echo '    6. absolute path'
      echo '    7. type (f or d)'
      echo '    8. title'
      echo '    9. location (g=git or l=local)'
      echo '    10. base path'
      echo '    11. Quick-TODO-aware title'
      echo '    12. Archived (A if archived - if not)'
      tput bold
      echo "  q notes nbck [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_empty_notes [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_list_todos [ARG...]"
      tput sgr0
      echo '    Output:'
      echo '    '
      echo '    1. Path'
      echo '    2. Line number'
      echo '    3. State (TODO or DONE)'
      echo '    4. Text of the TODO'
      echo '    5. Absolute path'
      echo '    6. File age'
      echo '    7. File mtime'
      echo '    8. Current state: TODO|DONE|LATER|OVERDUE|SOON'
      echo '    9. Earliest date (if any)'
      echo '    10. Due date (if any)'
      echo '    11. Context (one letter)'
      tput bold
      echo "  q notes ntodo_help [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes ntodo [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_git [ARG...]"
      tput sgr0
      echo '    Forwards its args to git running with the correct key and in the notes root.'
      tput bold
      echo "  q notes napi_clone [ARG...]"
      tput sgr0
      echo '    Clones the git reposity.'
      tput bold
      echo "  q notes nfsck [ARG...]"
      tput sgr0
      echo '    Resets the mtime of notes files from git.'
      tput bold
      echo "  q notes nw [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nwin [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_find [ARG...]"
      tput sgr0
      echo '    Runs find automatically scoped to the right mtime by the NEND and NSTART env'
      echo '    variables.'
      tput bold
      echo "  q notes napi_quick_title [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nlog [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nn [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nsync [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_match_files [ARG...]"
      tput sgr0
      echo '    Returns a list of files, as absolute paths, that match a search query. The'
      echo '    query is a list of terms, separated by spaces. Each term is either a'
      echo '    pro-pattern, or an anti-pattern:'
      echo '    '
      echo '    Pro-pattern terms are regular words (e.g. '"'"'foo'"'"') that MUST appear in the file.'
      echo '    If there are multiple pro-pattern terms, then they all must appear for a file'
      echo '    to match (match all).'
      echo '    '
      echo '    Anti-pattern terms start with a tilde `~` (e.g. `~bar`). Any file containing'
      echo '    even one of the anti-pattern terms is excluded from the results.'
      echo '    '
      echo '    Without any pro-patterns, starts with matching all files.'
      echo '    '
      echo '    Additional flags start with a dash '"'"'-'"'"', to be supplied in any position:'
      echo '    '
      echo '    -w match only complete words (DEFAULT) -W match substrings'
      tput bold
      echo "  q notes nls [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nhist [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nundo [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_drop_note [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes ngc [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_update_note [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes napi_edit_note [ARG...]"
      tput sgr0
      echo '    Opens vim for the given relative note path, then updates the notes tree using'
      echo '    the result. Optional second argument is the line number to open vim at.'
      tput bold
      echo "  q notes napi_perl_preview [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes nperl [ARG...]"
      tput sgr0
      tput bold
      echo "  q notes n [ARG...]"
      tput sgr0
      ;;
    time)
      echo "Usage: q time FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q time file_mtime [ARG...]"
      tput sgr0
      tput bold
      echo "  q time file_age [ARG...]"
      tput sgr0
      ;;
    find)
      echo "Usage: q find FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q find f [ARG...]"
      tput sgr0
      echo '    Shorthand for find'
      tput bold
      echo "  q find fcc [ARG...]"
      tput sgr0
      tput bold
      echo "  q find fgo [ARG...]"
      tput sgr0
      tput bold
      echo "  q find fjava [ARG...]"
      tput sgr0
      tput bold
      echo "  q find faidl [ARG...]"
      tput sgr0
      tput bold
      echo "  q find fd [ARG...]"
      tput sgr0
      ;;
    hg)
      echo "Usage: q hg FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q hg is_dir_hg [ARG...]"
      tput sgr0
      echo '    Is the current directory a mercurial repo? Fast check.'
      ;;
    xterm_colors)
      echo "Usage: q xterm_colors FUNCTION [ARG...]"
      echo "This file contains functions for working with xterm color codes."
      echo
      echo "Available functions:"
      tput bold
      echo "  q xterm_colors channel_step [ARG...]"
      tput sgr0
      echo '    Takes one RGB channel value as a 2-byte hex string and returns a decimal'
      echo '    number representing the step in XTERM_CHANNEL_STEPS that'"'"'s the closest.'
      tput bold
      echo "  q xterm_colors greyscale_step [ARG...]"
      tput sgr0
      echo '    As channel_step, but for greyscale.'
      tput bold
      echo "  q xterm_colors rgb_to_xterm [ARG...]"
      tput sgr0
      echo '    Takes an RGB color as a 6-byte hex string and returns the closest xterm color.'
      tput bold
      echo "  q xterm_colors hue_diff [ARG...]"
      tput sgr0
      echo '    Computes the hue difference between two RGB colors passed as 6-byte hex'
      echo '    strings. Result is in the interval [0; 765]. Contrast values greater than ~400'
      echo '    are usually legible for text, if sufficient brightness contrast also exists.'
      echo '    (Depends on terminal.)'
      tput bold
      echo "  q xterm_colors brightness [ARG...]"
      tput sgr0
      echo '    Computes the brightness of an RGB color passed as a 6-byte hex string. Result'
      echo '    is in the interval [0; 255]. Brightness contrast of ~100 is usually legible if'
      echo '    sufficient hue contrast also exists. (Depends on terminal.)'
      tput bold
      echo "  q xterm_colors contrast [ARG...]"
      tput sgr0
      echo '    Computes a contrast value between two RGB colors passed as 6-byte hex strings.'
      echo '    Result is in the interval [0; 192]. Combines hue and brightness information.'
      echo '    Contrast values over 80 are usually legible, depending on terminal.'
      tput bold
      echo "  q xterm_colors xterm_to_rgb [ARG...]"
      tput sgr0
      echo '    Takes an xterm color number as a decimal integer and returns a 6-byte hex of'
      echo '    the RGB color.'
      tput bold
      echo "  q xterm_colors xterm_to_fg [ARG...]"
      tput sgr0
      tput bold
      echo "  q xterm_colors xterm_to_bg [ARG...]"
      tput sgr0
      tput bold
      echo "  q xterm_colors tfmt [ARG...]"
      tput sgr0
      tput bold
      echo "  q xterm_colors color [ARG...]"
      tput sgr0
      tput bold
      echo "  q xterm_colors shades [ARG...]"
      tput sgr0
      tput bold
      echo "  q xterm_colors colors [ARG...]"
      tput sgr0
      ;;
    go)
      echo "Usage: q go FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q go pkg_do [ARG...]"
      tput sgr0
      ;;
    fedora)
      echo "Usage: q fedora FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q fedora setup [ARG...]"
      tput sgr0
      tput bold
      echo "  q fedora dnf_install_or_skip package1 package2 ..."
      tput sgr0
      echo '    Install a package with dnf if it'"'"'s not already installed.'
      ;;
    multiple_choice)
      echo "Usage: q multiple_choice FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q multiple_choice multiple_choice [-n|-L] [-i INPUT] [-p PAGE] [-m MSG] [-a ALPHABET] [-I CONTROLS] [-A CONTROL_ALPHABET]"
      tput sgr0
      echo '    Display an interactive menu with multiple choices, and then print the selected option to stdout.'
      echo '    '
      echo '    -n: return the number of the selected option'
      echo '    -L: return the string of the selected option'
      echo '    -p: page number to show'
      echo '    -m: prompt message'
      echo '    -a: alphabet'
      echo '    -I: control options'
      echo '    -A: control alphabet'
      echo '    -i: input (options to pick from)'
      ;;
    monitor)
      echo "Usage: q monitor FUNCTION [ARG...]"
      echo "This file provides functions to monitor system stats and write them to a log."
      echo
      echo "Available functions:"
      tput bold
      echo "  q monitor stream_load_stats [ARG...]"
      tput sgr0
      tput bold
      echo "  q monitor load_hist [ARG...]"
      tput sgr0
      tput bold
      echo "  q monitor latest_load_stats [ARG...]"
      tput sgr0
      tput bold
      echo "  q monitor write_load_stats [ARG...]"
      tput sgr0
      tput bold
      echo "  q monitor stream_top_stats [ARG...]"
      tput sgr0
      tput bold
      echo "  q monitor stream_net_stats [ARG...]"
      tput sgr0
      tput bold
      echo "  q monitor proc_stats [ARG...]"
      tput sgr0
      echo '    Outputs:'
      echo '    1. CPU util'
      echo '    2. Physical RAM util'
      echo '    3. Total RSS'
      echo '    4. User time total'
      echo '    5. System time total'
      echo '    6. PID with the highest CPU util'
      echo '    7. Comm with the highest CPU util'
      echo '    8. CPU util of the proc with the highest CPU util'
      echo '    9. PID with the highest RSS'
      echo '    10. Comm with the highest RSS'
      echo '    11. RSS of the proc with the highest RSS'
      ;;
    keyring)
      echo "Usage: q keyring FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q keyring keys_git [ARG...]"
      tput sgr0
      tput bold
      echo "  q keyring keys_path [ARG...]"
      tput sgr0
      tput bold
      echo "  q keyring keys_var [ARG...]"
      tput sgr0
      ;;
    pkg)
      echo "Usage: q pkg FUNCTION [ARG...]"
      echo
      echo "Available functions:"
      tput bold
      echo "  q pkg install_or_skip [PACKAGE...]"
      tput sgr0
      echo '    Install packages using the system package manager, or skip, if the package is'
      echo '    already installed.'
      ;;
    *)
      echo "Unknown module $1"
      return 1
      ;;
    esac
  fi
}

function __q_compgen() {
  local modules="browser python quick git bash net install ascii_art init crypt util rust strings mac media notes time find hg xterm_colors go fedora multiple_choice monitor keyring pkg"
  case "${COMP_CWORD}" in
  1)
    COMPREPLY=($(compgen -W "help ${modules}" -- ${COMP_WORDS[COMP_CWORD]}))
    return 0
  ;;
  2)
    case "${COMP_WORDS[1]}" in
    browser)
      COMPREPLY=($(compgen -W "help gdocs_id sheets_dl_link chrome_path downloads_path dl" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    python)
      COMPREPLY=($(compgen -W "help venv ipynb detect_python latest_python func" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    quick)
      COMPREPLY=($(compgen -W "help rebuild q" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    git)
      COMPREPLY=($(compgen -W "help mkproject git-ssh-init" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    bash)
      COMPREPLY=($(compgen -W "help get_bash_functions" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    net)
      COMPREPLY=($(compgen -W "help dataurl rtt ip4 ip4gw serve dump_url wiki wifi_device wifi_name" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    install)
      COMPREPLY=($(compgen -W "help reinstall_file file uninstall_file" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    ascii_art)
      COMPREPLY=($(compgen -W "help print_speech_bubble erase_lines cursor_position cursor_row print_bmo print_pedro scroll_output_pedro select_visual" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    init)
      COMPREPLY=($(compgen -W "help " -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    crypt)
      COMPREPLY=($(compgen -W "help encrypt_symmetric decrypt_symmetric gen_github_keypair package payloadify downloadify" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    util)
      COMPREPLY=($(compgen -W "help sud h reload markdown human_size install_heroku_cli bazel jup wait_for_file forex trim" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    rust)
      COMPREPLY=($(compgen -W "help rustup install_goodies" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    strings)
      COMPREPLY=($(compgen -W "help strip_control repeat" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    mac)
      COMPREPLY=($(compgen -W "help setup brew get_user_shell brew_bash_path switch_to_bash icloud icloud_evict brew_install_or_skip install_miniconda install_devtools" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    media)
      COMPREPLY=($(compgen -W "help yt-dl" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    notes)
      COMPREPLY=($(compgen -W "help napi_list_notes nbck napi_empty_notes napi_list_todos ntodo_help ntodo napi_git napi_clone nfsck nw nwin napi_find napi_quick_title nlog nn nsync napi_match_files nls nhist nundo napi_drop_note ngc napi_update_note napi_edit_note napi_perl_preview nperl n" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    time)
      COMPREPLY=($(compgen -W "help file_mtime file_age" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    find)
      COMPREPLY=($(compgen -W "help f fcc fgo fjava faidl fd" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    hg)
      COMPREPLY=($(compgen -W "help is_dir_hg" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    xterm_colors)
      COMPREPLY=($(compgen -W "help channel_step greyscale_step rgb_to_xterm hue_diff brightness contrast xterm_to_rgb xterm_to_fg xterm_to_bg tfmt color shades colors" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    go)
      COMPREPLY=($(compgen -W "help pkg_do" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    fedora)
      COMPREPLY=($(compgen -W "help setup dnf_install_or_skip" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    multiple_choice)
      COMPREPLY=($(compgen -W "help multiple_choice" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    monitor)
      COMPREPLY=($(compgen -W "help stream_load_stats load_hist latest_load_stats write_load_stats stream_top_stats stream_net_stats proc_stats" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    keyring)
      COMPREPLY=($(compgen -W "help keys_git keys_path keys_var" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    pkg)
      COMPREPLY=($(compgen -W "help install_or_skip" -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
    esac
    ;;
    *)
      COMPREPLY=($(compgen -A file -- ${COMP_WORDS[COMP_CWORD]}))
      return 0
      ;;
  esac
}

complete -F __q_compgen q

fi
