[[ -z "${TERM}" ]] && export TERM=xterm

alias l='ls -lh'
alias la='ls -lha'

BASH_PROFILE=`readlink -f ${BASH_SOURCE}`
REAL_HOME=`dirname "${BASH_PROFILE}"`
export EDITOR=`which vim`

if [[ `uname -a` == *debian* ]]
then
    PATH=/usr/sbin:/sbin:$PATH
fi

export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=100000
export SAVEHIST=100000
# This is necessary on macOS, otherwise they overwrite HISTFILE with something
# weird.
shopt -s histappend

VISUAL="$(cat ${REAL_HOME}/.redshell_visual | tr -d '\n')"

pushd "${REAL_HOME}/.redshell/src" > /dev/null
for f in ./*.bash; do
    source $f
done
popd > /dev/null

__prompt_color() {
    case "$1" in
        bmo)
            tput setaf "36"
        ;;

        lighthouse)
            tput setaf "196"
        ;;

        astronaut)
            tput setaf "205"
        ;;

        pacman)
            tput setaf "226"
            tput setab "16"
        ;;

        dachshund)
            tput setaf "215"
        ;;

        saturn)
            tput setaf "76"
        ;;

        drwho)
            tput setaf "32"
        ;;

        snufkin)
            tput setaf "106"
        ;;

        moose)
            tput setaf "94"
        ;;

        bessy)
            tput setab 160
            tput setaf 15
        ;;
    esac
}

__prompt_escape() {
    echo -n "\[$(tput bold)\]"
    [[ -z "$VISUAL" ]] || echo -e "\[$(__prompt_color $VISUAL)\]"
}

__git_info() {
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null
    ret=$?
    if [[ $ret -eq 0 ]]; then
        c=$(git status -s | wc -l | tr -d ' ')
        b=$(git branch --show-current | tr -d '* \n')
        h=`git rev-parse --short HEAD`
        echo -n "(git ${b}:${h}"
        if [[ "$c" -ne "0" ]]; then
            echo -n "+${c}"
        fi
        echo -n ") "
        return
    fi
}

__hg_info() {
    local root="$(pwd -P)"
    while [[ $root && ! -d $root/.hg ]]; do
        root="${root%/*}"
    done
    [[ -z "${root}" ]] && return 0
}

__error_info() {
    ret=$?
    case "$ret" in
        "0")
        ;;
        "126")
            echo -n "(EPERM [${ret}]) "
        ;;
        "127")
            echo -n "(ENOENT [${ret}]) "
        ;;
        "130")
            echo -n "(EINT [${ret}]) "
        ;;
        *)
            echo -n "(E [${ret}]) "
        ;;
    esac
}

__screen_info() {
    if [[ "$STY" != "" ]]; then
        echo "(s:${WINDOW}) "
    fi
}

__addr() {
    ips="`ip4`" || return 1
    n=`wc -l <<< "$ips"`
    if [[ n -eq 1 ]]; then
        echo "${ips}"
    else
        first=`head -n1 <<< "$ips"`
        k=`bc -l <<< "$n - 1"`
        echo "${first} + $k"
    fi
}

__addr_info() {
    a=`__addr` || return 1
    echo "(${a}) "
}

__time_info() {
    t=`date +%T` || return 1
    echo "(${t}) "
}

PS1_PREFIX="┌─|\[$(tput sgr0)\]\u@$(__prompt_escape)\h\[$(tput sgr0)\] \w "
PS1_WIDGETS="\[$(tput setaf 196)\]\$(__error_info)" # Has to be first
PS1_WIDGETS+="\[$(tput setaf 2)\]\$(__time_info)"
PS1_WIDGETS+="\[$(tput setaf 26)\]\$(__git_info)"
PS1_WIDGETS+="\[$(tput setaf 33)\]\$(__screen_info)"
PS1_WIDGETS+="\[$(tput setaf 214)\]\$(__addr_info)"
PS1_SUFFIX="\[$(tput sgr0)\]\n└─> "

PS1="${PS1_PREFIX}${PS1_WIDGETS}${PS1_SUFFIX}"


vid() {
    [[ -z "$VISUAL" ]] || "${REAL_HOME}/.redshell/asciiart/${VISUAL}.sh"
}

status() {
    vid
    echo "Local time: `date`"
    echo "This node: `hostname` (`uname -srm`)"
    
    local wifi=`wifi_name 2> /dev/null`
    [[ -z "${wifi}" ]] || echo "Connected to ${wifi}"
    return 0
}

export PATH=$HOME/bin:$PATH

[[ -z "${REDSHELL_SILENT}" ]] && status || true

 [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

if [[ `uname -a` == *Darwin* ]]
then
    # bind 'TAB:menu-complete'
    # bind '"\e[Z":menu-complete-backward'
    bind 'set colored-completion-prefix on'
    bind 'set show-all-if-ambiguous on'
fi

